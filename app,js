/*
 * Starter Project for WhatsApp Echo Bot Tutorial
 *
 * Remix this as the starting point for following the WhatsApp Echo Bot tutorial
 *
 */

"use strict";

// Access token for your app
// (copy token from DevX getting started page
// and save it as environment variable into the .env file)
const token = process.env.WHATSAPP_TOKEN;

// Imports dependencies and set up http server
const request = require("request"),
      express = require("express"),
      body_parser = require("body-parser"),
      axios = require("axios").default,
      app = express().use(body_parser.json()), // creates express http server
      fs = require('fs');

// Sets server port and logs message on success
app.listen(process.env.PORT || 1337, () => console.log("webhook is listening"));

// Initialize an empty object to store the data
const conversationData = {};

// Function to update the state of a conversation
function updateConversationState(waId, state) {
  if (conversationData[waId]) {
    conversationData[waId].state = state;
  } else {
    conversationData[waId] = {
      "state": state,
      "choice": -1,
    }    
  }

}

function updateConversationChoice(waId, choice) {
  conversationData[waId].choice = choice;
  console.log(conversationData);
  
}

// Function to retrieve the state of a conversation
function getConversationState(waId) {
  return conversationData[waId];
}

const STATES = {
  1: 'init',
  2: 'options_sent',
  3: 'confirm choice',
  4: 'sent_upi',
  5: 'confirm_payment',
  6: 'group_link',
};

// Usage example
let currentState = STATES.START;
if (currentState === STATES.START) {
  console.log('Starting state!');
}

function sendResponse(res, req, msg, resp_message) {
  let phone_number_id =
  req.body.entry[0].changes[0].value.metadata.phone_number_id;
  let from = req.body.entry[0].changes[0].value.messages[0].from;
  //console.log("default_message " + default_menu_message);
  axios({
    method: "POST", // Required, HTTP method, a string, e.g. POST, GET
    //maxBodyLength: Infinity,
    //maxContentLength: Infinity,
    url:
      "https://graph.facebook.com/v12.0/" +
      phone_number_id +
      "/messages?access_token=" +
      token,
    data: {
      messaging_product: "whatsapp",
      to: from,
      text: { body: resp_message },
    },
    headers: { "Content-Type": "application/json" },
  }).catch((error) => {
  console.log(error);
});
}

function messageHasBody(req) {
  if (req.body.object){
    return true;
  }
  return false;
}

function isTextMessage(req) {
  if (req.body.entry &&
      req.body.entry[0].changes &&
      req.body.entry[0].changes[0] &&
      req.body.entry[0].changes[0].value.messages &&
      req.body.entry[0].changes[0].value.messages[0])
  {
    return true;
  }
  return false;
}

const menu = {
  "1" : {
    "money": "INR 25",
    "whatsapp_group_link": "https://chat.whatsapp.com/LLV2qy4j8CxJsjsLbxuVKy",
    "name": "6th Maths",
    "description": "- Basic Maths 2\n- 25 Days\n- INR 25\n",    
  },
  "2" : {
    "money": "INR 45",
    "whatsapp_group_link": "https://chat.whatsapp.com/ER6XBYbrpE6HIpFnCIieAG",
    "name": "7th Maths",
    "description": "- Topic: Angle Chase/Pythagoras Theorem\n- 45 Days\n- INR 45\n",
  },
  "3" : {
    "money": "INR 29",
    "whatsapp_group_link": "https://chat.whatsapp.com/Gr80bQQYwkE8YdA93EfVsv",
    "name": "8th Maths",
    "description": "- Topic: Algebra\n- 29 Days\n- INR 29\n",
  },
  "4" : {
    "money": "INR 30",
    "whatsapp_group_link": "https://chat.whatsapp.com/I2nRjKx49GKDPIoKGvOMdK",
    "name": "9th Maths",
    "description": "- Topic: Circle 1\n- 30 Days\n- INR 30\n",    
  },
  "5" : {
    "money": "INR 50",
    "whatsapp_group_link": "https://chat.whatsapp.com/ERnI0H9urVyAATBsf1EGDH",
    "name": "Olympiad Geometry",
    "description": "- Olypiad level geometry\n- For Those who completed basic geometry\n- 50 Days\n- INR 50\n",
  },
}

function populate_options(menu) {
  let menu_size = Object.keys(menu).length;
  let option_range = " [1-" + menu_size + "] "
  let options_message = "Please select a option from" + option_range + "for the group you want to join:\n\n";

  // Iterate over the menu to add options.
  for (const key in menu) {
    options_message += key + ". " + menu[key].name + "\n";
  }
  return options_message;
}

function create_welcome_message(menu) {

  let menu_message = "*Welcome to Question A Day*.\nGroups you can join are as follows.\n";
  menu_message += populate_options(menu);
  menu_message += "\nThanks,\nSubodh Pethe";
  //console.log(menu_message);
  return menu_message;
}

const default_options_message = populate_options(menu);
const default_welcome_message = create_welcome_message(menu);

function isNumber(input) {
  return !isNaN(input);
}

function isValidMenuChoice(input) {
  if (input >= 1 && input <= Object.keys(menu).length) {
    return true;
  } else {
    return false;
  }
}

// Accepts POST requests at /webhook endpoint
app.post("/webhook", (req, res) => {
  // Parse the request body from the POST
  let body = req.body;

  // Check the Incoming webhook message
  console.log(JSON.stringify(req.body, null, 2));

  // info on WhatsApp text message payload: https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks/payload-examples#text-messages
  if (messageHasBody(req)) {
    if (isTextMessage(req)) {
      
      let from = req.body.entry[0].changes[0].value.messages[0].from; // extract the phone number from the webhook payload
      let resp_message = default_welcome_message// create_welcome_message(menu);
      
      let conversation_state = getConversationState(from)
      console.log("Conversation_state: " + conversation_state);
      if (!conversation_state)
      {
        let init_input = req.body.entry[0].changes[0].value.messages[0].text.body;
        if (init_input.toLowerCase() != "qad") {
          console.log('invalid init string');
          resp_message = "If you wish to joing question a day activity,\n*Please send 'QAD' in this chat*\nThanks."
          //res.sendStatus(200);
          //return;
        } else {
          console.log('Welcome new user');
          updateConversationState(from, "1");  
          
        }
      }  
      else {
        console.log('Key exists!' + conversation_state);
        switch (conversation_state.state) {
          case "1":
            let input_choice = req.body.entry[0].changes[0].value.messages[0].text.body; // extract the message text from the webhook payload
            if (isNumber(input_choice) && isValidMenuChoice(input_choice)) {
              conversation_state.choice = input_choice;
              updateConversationChoice(from, input_choice);
              let group_desc = "*" + menu[conversation_state.choice].name + ":*\n" + menu[conversation_state.choice + ""].description;
              console.log("You choose" + conversation_state.choice);
              resp_message = `You choose: ${input_choice}\n\n` +
                              group_desc + 
                            "\nSend yes to confirm. Send no to return to menu.\n";
              updateConversationState(from, "2");
            } else {
              resp_message = `Invalid choice.\n`;
              resp_message += default_options_message;
            }
            break;
          case "2": 
            let input = req.body.entry[0].changes[0].value.messages[0].text.body;
            if (input.toLowerCase() == "yes") {
              console.log("You choose" + conversation_state.choice);
              let money = menu[conversation_state.choice + ""].money;
              resp_message = `Please send ${money} to smita.pethe70@oksbi UPI and send the screenshot here.\n\nSend 'back' in this chat to return to menu.`;
              updateConversationState(from, "3");              
            } else if (input.toLowerCase() == "no"){
              conversation_state.choice = -1;
              resp_message = default_options_message;
              updateConversationState(from, "1");
            } else {
              //conversation_state.choice = -1;
              //resp_message = `Invalid choice.\n`;
              resp_message = "Send yes to confirm. Send no to return to menu.\n";
              //updateConversationState(from, "1");
            }
            break;
          case "3":
            
            let type = req.body.entry[0].changes[0].value.messages[0].type;
            console.log('Type is:' + type);
            if (type == "image") {
              console.log("choice is:" + conversation_state.choice)
              let wa_link = menu[conversation_state.choice + ""].whatsapp_group_link;
              console.log("wa link: " + wa_link);
              resp_message = "Thanks for joining 8th standard QAD program. Please use the following link to joining the whatsapp group.\n" + 
                             `Please do not share the link as this is paid activity.\n\nLink: ${wa_link}` + 
                              "\n\nThanks,\n- Subodh Pethe";
              delete conversationData[from];
            } else {
              let input = req.body.entry[0].changes[0].value.messages[0].text.body;
              if (input.toLowerCase() == "back") {
                conversation_state.choice = -1;
                resp_message = default_options_message;
                updateConversationState(from, "1");
              } else {
                resp_message = "Please send the confirmation image to proceed.\nSend 'back' in this chat to return to menu.";  
              }
            }
            break;
        }
        
      }

        sendResponse(res, req, resp_message, resp_message);
    }
    res.sendStatus(200);
  } else {
    // Return a '404 Not Found' if event is not from a WhatsApp API
    res.sendStatus(404);
  }
});



// SHEEL Note: Not needed after initializing the webhook.
// Accepts GET requests at the /webhook endpoint. You need this URL to setup webhook initially.
// info on verification request payload: https://developers.facebook.com/docs/graph-api/webhooks/getting-started#verification-requests 
app.get("/webhook", (req, res) => {
  /**
   * UPDATE YOUR VERIFY TOKEN
   *This will be the Verify Token value when you set up webhook
  **/
  const verify_token = process.env.VERIFY_TOKEN;

  // Parse params from the webhook verification request
  let mode = req.query["hub.mode"];
  let token = req.query["hub.verify_token"];
  let challenge = req.query["hub.challenge"];

  // Check if a token and mode were sent
  if (mode && token) {
    // Check the mode and token sent are correct
    if (mode === "subscribe" && token === verify_token) {
      // Respond with 200 OK and challenge token from the request
      console.log("WEBHOOK_VERIFIED");
      res.status(200).send(challenge);
    } else {
      // Responds with '403 Forbidden' if verify tokens do not match
      res.sendStatus(403);
    }
  }
});
